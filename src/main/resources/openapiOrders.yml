openapi: 3.0.3
info:
  title: Orders Microservice Workshop
  description: Microservice where orders are going to be created, modifed, eliminated and followed
  contact:
    email: rnrv@gft.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Orders Repository
  url: https://git.gft.com/csjn/Orders_workshop
servers:
  - url: http://localhost:8080
    description: Local Server

paths:
  /orders:
    get:
      tags:
        - orders
      summary: List all orders
      description: Retrieves a list of all orders.
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server ErrorMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /orders/{id}:
    get:
      tags:
        - orders
      summary: Get details of a specific order
      description: Retrieves the details of an existing order by its ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Order ID
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server ErrorMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      tags:
        - orders
      summary: Create a new order
      description: Creates a new order based on the user's shopping cart.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditCardDto'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server ErrorMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

    patch:
      tags:
        - orders
      summary: Update the information of an order
      description: Updates the status or information of an existing order.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server ErrorMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      tags:
        - orders
      summary: Cancel an order
      description: Cancels an order by its ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Order ID
      responses:
        '204':
          description: Order canceled
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server ErrorMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /orders/products/{orderId}:
    get:
      tags:
        - orders
      summary: List all items in an order
      description: Retrieves the items contained in a specific order.
      parameters:
        - in: path
          name: orderId
          schema:
            type: integer
          required: true
          description: Order ID
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server ErrorMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /orders/user/{userId}:
    get:
      tags:
        - orders
      summary: List all Ordeers pertaining to a user
      description: Retrieves the orders contained in a specific user.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Order ID
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server ErrorMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'


components:
  schemas:
    Address:
      type: object
      properties:
        orderId:
          type: integer
          description: Order ID associated with the address
          example: 0
        order:
          type: string
          description: Order reference
          example: "string"
        street:
          type: string
          description: Street name
          example: "string"
        number:
          type: integer
          description: Street number
          example: 0
        door:
          type: string
          description: Door information
          example: "string"
        cityName:
          type: string
          description: City name
          example: "string"
        zipCode:
          type: string
          description: ZIP code
          example: "string"
        countryId:
          type: integer
          description: Country ID
          example: 0

    Country:
      type: object
      properties:
        id:
          type: integer
          description: Country ID
          example: 0
        name:
          type: string
          description: Country name
          example: "string"
        tax:
          type: number
          description: Tax rate
          example: 0
        prefix:
          type: string
          description: Country prefix
          example: "string"
        timeZone:
          type: string
          description: Time zone
          example: "string"

    User:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 0
        name:
          type: string
          description: User's first name
          example: "string"
        lastName:
          type: string
          description: User's last name
          example: "string"
        email:
          type: string
          description: User's email address
          example: "string"
        phone:
          type: string
          description: User's phone number
          example: "string"

    Order:
      type: object
      properties:
        id:
          type: integer
          description: Order ID
          example: 0
        cartId:
          type: integer
          description: Cart ID associated with the order
          example: 0
        userId:
          type: integer
          description: User ID that placed the order
          example: 0
        countryId:
          type: integer
          description: Country ID
          example: 0
        fromAddress:
          type: string
          description: Address from which the order is shipped
          example: "string"
        status:
          type: string
          description: Order status ('UNPAID','PAID','SENT','IN_DELIVERY','DELIVERED','UNKNOWN')
          example: "UNPAID"
        dateOrdered:
          type: string
          format: date-time
          description: Date and time when the order was placed
          example: "string"
        dateDelivered:
          type: string
          format: date-time
          description: Date and time when the order was delivered
          example: "string"
        user:
          $ref: '#/components/schemas/User'
        address:
          $ref: '#/components/schemas/Address'
        country:
          $ref: '#/components/schemas/Country'
        orderedProducts:
          type: array
          items:
            type: string
            description: List of ordered products
            example: "string"
        totalPrice:
          type: number
          description: Total price of the order
          example: 0

    Product:
      type: object
      properties:
        productId:
          type: integer
          description: Product ID
          example: 0
        order:
          $ref: '#/components/schemas/Order'
        name:
          type: string
          description: Product name
          example: "string"
        description:
          type: string
          description: Product description
          example: "string"
        price:
          type: number
          description: Product price
          example: 0
        quantity:
          type: integer
          description: Quantity of the product ordered
          example: 0

    Status:
      type: object
      properties:
        status:
          type: string
          description: status
          example: PAID

    CreditCardDto:
      type: object
      properties:
        cardNumber:
          type: integer
          description: Nine number of card
          example: 111111111
        expirationDate:
          type: string
          description: Expiration Card Date
          example: 00/00
        cvcCode:
          type: integer
          description: Three to Four numbers on the card
          example: 1111

    ErrorMessage:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - message
        - ErrorMessage_code